name: Industrialisation continue sur le serveur AWS (Tomcat)
on: push
jobs:
  build:
    name: Package AWS
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - run: |
          jar cvf ivann.war *
    - name: copy file via ssh password
      uses: appleboy/scp-action@master
      with:
        host: ${{secrets.HOST_DNS}}
        username: ${{secrets.USERNAME}}
        key: ${{secrets.EC2_SSH_KEY}}
        port: ${{secrets.DEPLOY_PORT}}
        source: "ivann.war"
        target: "/opt/tomcat/webapps"

  deploy:
    name: SAV IPFS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@master
      - run: |
          jar cvf ivann.war *
      - uses: jirutka/setup-alpine@v1
        with:
          branch: v3.15
      - run: |
          apk add go-ipfs
          ipfs init
          ipfs daemon &
        shell: alpine.sh --root {0}
      - name: Sauvegarde fichier war sur IPFS
        run: |
          ls -la 
          ipfs swarm peers
          ipfs add ivann.war
        shell: alpine.sh --root {0}
      # - name: Notification Discord
      #   env:
      #     DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      #   run: |
      #     ipfs_key=$(cat ipfs_key.txt)
      #     curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"Le workflow IPFS est terminé. Clé IPFS : $ipfs_key\"}" $DISCORD_WEBHOOK

  # finish:
  #   name: Sauvegarde SQL
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #     - uses: actions/checkout@master
  #     - run: |
  #         sudo apt install ipfs
  #         sudo apt install mysql mysql-client
  #         wget https://cdn.discordapp.com/attachments/1153635547974225920/1171394118920974376/EPSI2023_G1.pem
  #         ssh -i "EPSI2023_G1.pem" admin@${{ secrets.HOST_DNS }} -fN -L 0.0.0.0:3307:127.0.0.1:3306
  #         mysqldump -ucnam -P3307 -p"${{ secrets.SQL_PASS }}" films > sauvegarde_films.sql
  #         ls -la 
  #         ipfs swarm peers
  #         ipfs add sauvegarde_films.sql
  #     - uses: jirutka/setup-alpine@v1
  #       with:
  #         branch: v3.15

  check:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}